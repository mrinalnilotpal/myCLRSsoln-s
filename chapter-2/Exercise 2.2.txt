-------------------------------------------------------------------------------SOLUTIONS-------------------------------------------------------------------------------------------

2.2.1  We have a polynomial equation n^3/1000 + 100n^2 - 100n +3.
Now interms of theta notations, only the highest order of growth matters.
Since the highest order of growth is n^3, hence in therms of theta notations, it will be theta(n^3).

2.2.2 

See codes for selection sort as 2.2.2.cpp

2.2.3 
For linear search, on an average we assume that the middle element of the sequence to be the key. hence the time taken to reach is O(n/2) which is as bad as the worst case 
O(n)(time taken to check the entire sequence since it constants doesn't matter ). And for best case will be the very first element to be the key. Hence only O(1) time will be taken.

2.2.4
 For a good best-case running time, modify an algorithm to first randomly
produce output and then check whether or not it satisfies the goal of the algorithm. If so, produce this output and halt. Otherwise, run the algorithm as
usual. It is unlikely that this will be successful, but in the best-case the running
time will only be as long as it takes to check a solution. For example, we could
modify selection sort to first randomly permute the elements of A, then check if
they are in sorted order. If they are, output A. Otherwise run selection sort as
usual. In the best case, this modified algorithm will have running time Î˜(n).
